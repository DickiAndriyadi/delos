// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	gorm "github.com/jinzhu/gorm"
	mock "github.com/stretchr/testify/mock"

	model "delos/api/model"

	payload "delos/api/model/payload"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddNewFarm provides a mock function with given fields: db, store
func (_m *Repository) AddNewFarm(db *gorm.DB, store *model.Farm) (*model.Farm, error) {
	ret := _m.Called(db, store)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Farm) *model.Farm); ok {
		r0 = rf(db, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Farm) error); ok {
		r1 = rf(db, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFarm provides a mock function with given fields: db, id
func (_m *Repository) DeleteFarm(db *gorm.DB, id string) error {
	ret := _m.Called(db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string) error); ok {
		r0 = rf(db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetailOfFarm provides a mock function with given fields: db, _a1
func (_m *Repository) DetailOfFarm(db *gorm.DB, _a1 map[string]interface{}) (*model.Farm, error) {
	ret := _m.Called(db, _a1)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(*gorm.DB, map[string]interface{}) *model.Farm); ok {
		r0 = rf(db, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, map[string]interface{}) error); ok {
		r1 = rf(db, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfFarm provides a mock function with given fields: db
func (_m *Repository) ListOfFarm(db *gorm.DB) (*model.Farms, error) {
	ret := _m.Called(db)

	var r0 *model.Farms
	if rf, ok := ret.Get(0).(func(*gorm.DB) *model.Farms); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farms)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFarm provides a mock function with given fields: db, store, id
func (_m *Repository) UpdateFarm(db *gorm.DB, store *payload.AddUpdateFarm, id string) (*model.Farm, error) {
	ret := _m.Called(db, store, id)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(*gorm.DB, *payload.AddUpdateFarm, string) *model.Farm); ok {
		r0 = rf(db, store, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *payload.AddUpdateFarm, string) error); ok {
		r1 = rf(db, store, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
