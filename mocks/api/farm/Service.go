// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "delos/api/model"

	mock "github.com/stretchr/testify/mock"

	payload "delos/api/model/payload"

	response "delos/api/model/response"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNewFarm provides a mock function with given fields: p
func (_m *Service) AddNewFarm(p payload.AddUpdateFarm) (*model.Farm, *response.ErrorResponse) {
	ret := _m.Called(p)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(payload.AddUpdateFarm) *model.Farm); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(payload.AddUpdateFarm) *response.ErrorResponse); ok {
		r1 = rf(p)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// DeleteFarm provides a mock function with given fields: id
func (_m *Service) DeleteFarm(id string) (string, *response.ErrorResponse) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *response.ErrorResponse); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// DetailOfFarm provides a mock function with given fields: id
func (_m *Service) DetailOfFarm(id string) (*model.Farm, *response.ErrorResponse) {
	ret := _m.Called(id)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(string) *model.Farm); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *response.ErrorResponse); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// ListOfFarm provides a mock function with given fields:
func (_m *Service) ListOfFarm() (*model.Farms, *response.ErrorResponse) {
	ret := _m.Called()

	var r0 *model.Farms
	if rf, ok := ret.Get(0).(func() *model.Farms); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farms)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func() *response.ErrorResponse); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// UpdateFarm provides a mock function with given fields: p, id
func (_m *Service) UpdateFarm(p payload.AddUpdateFarm, id string) (*model.Farm, *response.ErrorResponse) {
	ret := _m.Called(p, id)

	var r0 *model.Farm
	if rf, ok := ret.Get(0).(func(payload.AddUpdateFarm, string) *model.Farm); ok {
		r0 = rf(p, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Farm)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(payload.AddUpdateFarm, string) *response.ErrorResponse); ok {
		r1 = rf(p, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
