// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	filter "delos/api/pond/filter"

	mock "github.com/stretchr/testify/mock"

	model "delos/api/model"

	payload "delos/api/model/payload"

	response "delos/api/model/response"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNewPond provides a mock function with given fields: p
func (_m *Service) AddNewPond(p payload.AddUpdatePond) (*model.Pond, *response.ErrorResponse) {
	ret := _m.Called(p)

	var r0 *model.Pond
	if rf, ok := ret.Get(0).(func(payload.AddUpdatePond) *model.Pond); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pond)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(payload.AddUpdatePond) *response.ErrorResponse); ok {
		r1 = rf(p)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// DeletePond provides a mock function with given fields: id
func (_m *Service) DeletePond(id string) (string, *response.ErrorResponse) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *response.ErrorResponse); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// DetailOfPond provides a mock function with given fields: id
func (_m *Service) DetailOfPond(id string) (*model.Pond, *response.ErrorResponse) {
	ret := _m.Called(id)

	var r0 *model.Pond
	if rf, ok := ret.Get(0).(func(string) *model.Pond); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pond)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(string) *response.ErrorResponse); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// ListOfPond provides a mock function with given fields: f
func (_m *Service) ListOfPond(f *filter.FilterListOfPond) (*model.Ponds, *response.ErrorResponse) {
	ret := _m.Called(f)

	var r0 *model.Ponds
	if rf, ok := ret.Get(0).(func(*filter.FilterListOfPond) *model.Ponds); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Ponds)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(*filter.FilterListOfPond) *response.ErrorResponse); ok {
		r1 = rf(f)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

// UpdatePond provides a mock function with given fields: p, id
func (_m *Service) UpdatePond(p payload.AddUpdatePond, id string) (*model.Pond, *response.ErrorResponse) {
	ret := _m.Called(p, id)

	var r0 *model.Pond
	if rf, ok := ret.Get(0).(func(payload.AddUpdatePond, string) *model.Pond); ok {
		r0 = rf(p, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Pond)
		}
	}

	var r1 *response.ErrorResponse
	if rf, ok := ret.Get(1).(func(payload.AddUpdatePond, string) *response.ErrorResponse); ok {
		r1 = rf(p, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*response.ErrorResponse)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
